{
  "name": "Customview viewpager",
  "tagline": "自定义控件，通过ViewPager实现app的引导页。",
  "body": "# customview_viewpager\r\n自定义控件，通过ViewPager实现大图轮播或者是app的引导页。\r\n\r\n##ViewPager引导页知识点\r\n\r\n- ViewPager设置**addOnPageChangeListener()**，其中onPageScrolled()方法可以获取到ViewPager处于哪一页，滑动偏移量等信息\r\n- Button在最后一个页面显示，可以通过onPageSelected()方法中的位置来判断是否到了最后一页，来显示button\r\n- ViewPager设置**setAdapter()**，可以把需要显示的引导页显示出来\r\n- setAdapter()需要实现一个adapter**继承PagerAdapter**,实现4个主要的方法：\r\n   - public int **getCount()**:返回引导页的数量\r\n   - public boolean **isViewFromObject(View view, Object object)**：判断显示的是否是同一张图片，返回view == object\r\n   - public Object **instantiateItem(ViewGroup container, int position)**：显示的图片可以进行缓存的时候，会调用这个方法进行显示图片的初始化，将要显示的ImageView加入到ViewGroup中，然后作为返回值返回\r\n   - public void **destroyItem(ViewGroup container, int position, Object object)**：PagerAdapter只缓存三张要显示的图片，如果滑动的图片超出了缓存的范围，就会调用这个方法，将图片销毁.如：container.removeView(view(object)) \r\n- 获取到两个point的距离，在onCreate()中的时候，界面还没有layout完成，可以通过getViewTreeObserver()来观察，当完成了onLayout以后，才能获取到距离\r\n\r\n        ll_guide_group.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {\r\n            @Override\r\n            public void onGlobalLayout() {\r\n                ll_guide_group.getViewTreeObserver().removeGlobalOnLayoutListener(this);\r\n                pointDis = ll_guide_group.getChildAt(1).getLeft() - ll_guide_group.getChildAt(0).getLeft();\r\n                Log.e(TAG, \"连个point的距离为：\" + pointDis);\r\n            }\r\n        });  \r\n\r\n- 设置全屏，并且去掉系统属性栏\r\n \r\n        <style name=\"NoTitle\" parent=\"Theme.AppCompat.Light.NoActionBar\">\r\n            <item name=\"android:windowNoTitle\">true</item>\r\n            <item name=\"android:windowActionBar\">false</item>\r\n            <item name=\"android:windowFullscreen\">true</item>\r\n            <item name=\"android:windowContentOverlay\">@null</item>\r\n        </style>\r\n\r\n- 小圆点可以通过shape属性来设置。\r\n   \r\n        <?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n        <shape xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n        \t android:shape=\"oval\">\r\n           <solid android:color=\"@android:color/darker_gray\"/>\r\n        </shape>\r\n\r\n- 给Button设置按压样式，通过selector\r\n- 给Button的文字颜色设置按压样式，通过selector，通过设置android:color的属性\r\n\r\n##适配问题\r\n- 在XML中设置大小用的单位是dp，但是在代码中设置大小用的是pix，假如在代码中设置大小的话，需要把dp转换为具体手机的pix，否则会出现适配问题。\r\n\r\n\t\tpublic class DensityUtil {  \r\n  \r\n    \t/** \r\n    \t * 根据手机的分辨率从 dip 的单位 转成为 px(像素) \r\n    \t */  \r\n   \t\tpublic static int dip2px(Context context, float dpValue) {  \r\n        \tfinal float scale = context.getResources().getDisplayMetrics().density;  \r\n        \treturn (int) (dpValue * scale + 0.5f);  \r\n    \t}  \r\n  \r\n   \t\t /** \r\n   \t\t  * 根据手机的分辨率从 px(像素) 的单位 转成为 dp \r\n   \t\t  */  \r\n    \tpublic static int px2dip(Context context, float pxValue) {  \r\n       \t \tfinal float scale = context.getResources().getDisplayMetrics().density;  \r\n        \treturn (int) (pxValue / scale + 0.5f);  \r\n   \t\t }  \r\n\t\t} ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}